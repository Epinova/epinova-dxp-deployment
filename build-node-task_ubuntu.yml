parameters:
- name: extensionRoot
  type: string
- name: taskName
  type: string

steps:  
- task: PowerShell@2
  displayName: '${{parameters.taskName}}:Calculate and save package-lock.json hash'
  inputs:
    targetType: 'inline'
    script: |
      # generates a hash of all package-lock.json and saves each on a single line on 'packagelockjsonhash.txt'
      $hashValue = (Get-FileHash -Algorithm MD5 -Path (Get-ChildItem package-lock.json -Recurse)).Hash
      Write-Host "Hash: $hashValue"
      $hashValue >> packagelockjsonhash.txt
      Write-Host "Hash File saved to ${{parameters.extensionRoot}}/${{parameters.taskName}}/packagelockjsonhash.txt"
      Write-Host "##vso[task.setvariable variable=myHashValue;]"$hashValue
    workingDirectory: '${{parameters.extensionRoot}}/${{parameters.taskName}}'

- task: CacheBeta@0 # speed up builds by caching node_modules folder
  inputs:
    #key: nuget|1|$(Agent.OS)|${{parameters.extensionRoot}}/${{parameters.taskName}}/packagelockjsonhash.txt # hash map generated in previous step
    key: nuget|1|$(Agent.OS)|$(myHashValue) # hash map generated in previous step
    path: ${{parameters.extensionRoot}}/${{parameters.taskName}}/node_modules
    cacheHitVar: 'npm_cache_hit' # variable that can be checked to see if it was successful
  displayName: '${{parameters.taskName}}: Cache npm packages'
  continueOnError: true

# - task: PowerShell@2
#   displayName: '${{parameters.taskName}}: Check cache hit'
#   inputs:
#     targetType: 'inline'
#     script: |
#       Write-Host "Cachehit: $npm_cache_hit"
  #  workingDirectory: '${{parameters.extensionRoot}}/${{parameters.taskName}}'

- task: Npm@1
  condition: ne(variables.npm_cache_hit, 'true')
  displayName: '${{parameters.taskName}}: npm install'
  inputs:
    command: 'install'
    workingDir: '${{parameters.extensionRoot}}/${{parameters.taskName}}'

# - task: SnykSecurityScan@0
#   inputs:
#     serviceConnectionEndpoint: 'Snyk (Apr2020)'
#     testType: 'app'
#     monitorOnBuild: true
#     failOnIssues: true
#     testDirectory: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'

- task: Npm@1
  displayName: '${{parameters.taskName}}: npm run build'
  inputs:
    command: 'custom'
    workingDir: '${{parameters.extensionRoot}}/${{parameters.taskName}}'
    customCommand: 'run build'

# - task: Npm@1
#   displayName: '${{parameters.taskName}}: npm run test'
#   inputs:
#     command: 'custom'
#     workingDir: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'
#     customCommand: 'run test'

# - task: PublishTestResults@2
#   displayName: '${{parameters.taskName}}: Publish Test Results'
#   inputs:
#     cwd: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'
#     testRunTitle: '${{parameters.taskName}}'

- task: Npm@1
  displayName: '${{parameters.taskName}}: npm run package'
  inputs:
    command: 'custom'
    workingDir: '${{parameters.extensionRoot}}/${{parameters.taskName}}'
    customCommand: 'run package'

- task: PowerShell@2
  displayName: '${{parameters.taskName}}: Delete unwanted files/folders'
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -path "${{parameters.extensionRoot}}/${{parameters.taskName}}\dist" -Force -Recurse
      Remove-Item -path "${{parameters.extensionRoot}}/${{parameters.taskName}}\src" -Force -Recurse
      Remove-Item -path "${{parameters.extensionRoot}}/${{parameters.taskName}}\test" -Force -Recurse
      Remove-Item -path "${{parameters.extensionRoot}}/${{parameters.taskName}}\*.js.map" -Force -Recurse
      $filePath = "${{parameters.extensionRoot}}/${{parameters.taskName}}\node_modules\azure-pipelines-tasks-azure-arm-rest-v2\openssl\OpenSSL License.txt"
      if (Test-Path $filePath) { Remove-Item -path $filePath -Force -Recurse }
    workingDirectory: '${{parameters.extensionRoot}}/${{parameters.taskName}}'

