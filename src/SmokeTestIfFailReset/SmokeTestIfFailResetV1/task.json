{
    "id": "4c405787-d44f-4a1c-b796-fad1b6acdea8",
    "name": "DxpSmokeTestIfFailReset",
    "friendlyName": "Smoke test if fail reset (Optimizely DXP)",
    "description": "Reset the verification 'slot' IF the smoke tests does not pass. (Optimizely DXP, former Episerver DXC)",
    "helpUrl": "https://github.com/Epinova/epinova-dxp-deployment/blob/master/documentation/SmokeTestIfFailReset.md",
    "helpMarkDown": "[Extension page](https://marketplace.visualstudio.com/items?itemName=epinova-sweden.epinova-dxp-deploy-extension)[Learn more about this task](https://github.com/Epinova/epinova-dxp-deployment/blob/master/documentation/SmokeTestIfFailReset.md)",
    "category": "Deploy",
    "visibility": [
        "Release"
    ],
    "author": "Epinova (Ove Lartelius)",
    "version": {
        "Major": 1,
        "Minor": 3,
        "Patch": 2
    },
    "groups": [
        {
            "name": "Settings",
            "displayName": "Script settings",
            "isExpanded": true
        },
        {
            "name": "Retry",
            "displayName": "Retry",
            "isExpanded": false
        },
        {
            "name": "Timeout",
            "displayName": "Timeout",
            "isExpanded": false
        },
        {
            "name": "ErrorHandlingOptions",
            "displayName": "Error handling options",
            "isExpanded": false
        }
    ],
    "releaseNotes": "ResetOnFail. Using EpinovaDxpDeploymentUtil.",
    "minimumAgentVersion": "2.134.0",
    "inputs": [
        {
            "name": "ClientKey",
            "type": "string",
            "label": "DXP target environment ClientKey",
            "required": true,
            "defaultValue": "$(ClientKey)",
            "helpMarkDown": "The DXP project ClientKey. Generated in the PAAS interface.",
            "groupName": "Settings"
        },
        {
            "name": "ClientSecret",
            "type": "string",
            "label": "DXP target environment ClientSecret",
            "required": true,
            "defaultValue": "$(ClientSecret)",
            "helpMarkDown": "The DXP project ClientSecret. Generated in the PAAS interface.",
            "groupName": "Settings"
        },
        {
            "name": "ProjectId",
            "type": "string",
            "label": "Project Id",
            "required": true,
            "defaultValue": "$(DXP.ProjectId)",
            "helpMarkDown": "The DXP ProjectId (GUID). Look in the URL when in PAAS for your project. You will see the GUID as part of the URL.",
            "groupName": "Settings"
        },
        {
            "name": "TargetEnvironment",
            "type": "pickList",
            "label": "Target environment",
            "required": true,
            "defaultValue": "$(TargetEnvironment)",
            "helpMarkDown": "The environment that you you want to start the deploy to.",
            "groupName": "Settings",
            "options": {
                "Integration": "Integration",
                "Preproduction": "Preproduction",
                "Production": "Production"
            }
        },
        {
            "name": "Urls",
            "type": "multiLine",
            "label": "URLs",
            "required": true,
            "defaultValue": "$(EnvironmentSlotUrl)",
            "helpMarkDown": "The URL(s) that should be tested (expect HTTP status 200). If you have authentication turned on you need to point to URLs that return HTTP status 200.",
            "groupName": "Settings"
        },
        {
            "name": "SleepBeforeStart",
            "type": "int",
            "label": "Sleep before start (in seconds)",
            "required": true,
            "defaultValue": "20",
            "helpMarkDown": "The sleep time before the script will start to test the URL(s). Most of the time the slot need some extra time to get up and runing even if the status says that it is up and runing.",
            "groupName": "Settings"
        },
        {
            "name": "ResetOnFail",
            "type": "boolean",
            "label": "Reset on fail",
            "required": true,
            "defaultValue": "true",
            "helpMarkDown": "If checked it will reset the deployment if smoke test fails. If not checked, only a warning will be posted but no reset. Can be used when you want to use SmokeTestIfFailReset task when doing a ContentSync.",
            "groupName": "Settings"
        },
        {
            "name": "NumberOfRetries",
            "type": "int",
            "label": "Number of retries",
            "required": true,
            "defaultValue": "5",
            "helpMarkDown": "The number of retries that the script will make before return error and reset the deployment.",
            "groupName": "Retry"
        },
        {
            "name": "SleepBeforeRetry",
            "type": "int",
            "label": "Sleep before retry (in seconds)",
            "required": true,
            "defaultValue": "30",
            "helpMarkDown": "The sleep time before the script will start to test the URL(s) again. This will only happend if the HTTP status response from one/many of the URLs is not responding with HTTP status 200.",
            "groupName": "Retry"
        },
        {
            "name": "Timeout",
            "type": "int",
            "label": "Script timeout (in seconds)",
            "required": true,
            "defaultValue": "1800",
            "helpMarkDown": "The timeout for the script.",
            "groupName": "Timeout"
        },
        {
            "name": "ErrorActionPreference",
            "type": "pickList",
            "label": "ErrorActionPreference",
            "required": false,
            "defaultValue": "stop",
            "options": {
                "stop": "Stop",
                "continue": "Continue",
                "silentlyContinue": "SilentlyContinue"
            },
            "helpMarkDown": "Prepends the line `$ErrorActionPreference = 'VALUE'` at the top of your script.",
            "groupName": "ErrorHandlingOptions"
        }
    ],
    "instanceNameFormat": "Smoke test (if error => reset deploy)",
    "execution": {
        "PowerShell3": {
            "target": "SmokeAndResetTargetEnvironment.ps1"
        }
    },
    "messages": {
        "PS_TM_ParseSessionVariablesValueNotFound": "Parsing operation failed. ErrorMessage: 'value not found', Token: '{0}', CurrentKey: '{1}'"
    }
}