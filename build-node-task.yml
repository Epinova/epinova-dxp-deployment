parameters:
- name: extensionRoot
  type: string
- name: taskName
  type: string

steps:  
- task: PowerShell@2
  displayName: 'Calculate and save package.json hash'
  inputs:
    targetType: 'inline'
    script: |
      # generates a hash of all package.json and saves each on a single line on 'packagejsonhash.txt'
      Get-FileHash -Algorithm MD5 -Path (Get-ChildItem package.json -Recurse) >> packagejsonhash.txt
      Write-Host "Hash File saved to ${{parameters.extensionRoot}}\${{parameters.taskName}}\packagejsonhash.txt"
    workingDirectory: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'

- task: CacheBeta@0 # speed up builds by caching node_modules folder
  inputs:
    key: nuget|1|$(Agent.OS)|${{parameters.extensionRoot}}\${{parameters.taskName}}\packagejsonhash.txt # hash map generated in previous step
    path: ${{parameters.extensionRoot}}\${{parameters.taskName}}\node_modules
    cacheHitVar: 'npm_cache_hit' # variable that can be checked to see if it was successful
  displayName: Cache npm packages
  continueOnError: true

- task: Npm@1
  displayName: '${{parameters.taskName}}: npm install'
  inputs:
    command: 'install'
    workingDir: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'

# - task: SnykSecurityScan@0
#   inputs:
#     serviceConnectionEndpoint: 'Snyk (Apr2020)'
#     testType: 'app'
#     monitorOnBuild: true
#     failOnIssues: true
#     testDirectory: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'

- task: Npm@1
  displayName: '${{parameters.taskName}}: npm run build'
  inputs:
    command: 'custom'
    workingDir: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'
    customCommand: 'run build'

- task: Npm@1
  displayName: '${{parameters.taskName}}: npm run test'
  inputs:
    command: 'custom'
    workingDir: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'
    customCommand: 'run test'

- task: PublishTestResults@2
  displayName: '${{parameters.taskName}}: Publish Test Results'
  inputs:
    cwd: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'
    testRunTitle: '${{parameters.taskName}}'

- task: Npm@1
  displayName: '${{parameters.taskName}}: npm run package'
  inputs:
    command: 'custom'
    workingDir: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'
    customCommand: 'run package'

- task: PowerShell@2
  displayName: '${{parameters.taskName}}: Delete unwanted files/folders'
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -path "${{parameters.extensionRoot}}\\${{parameters.taskName}}\dist" -Force -Recurse
      Remove-Item -path "${{parameters.extensionRoot}}\\${{parameters.taskName}}\src" -Force -Recurse
      Remove-Item -path "${{parameters.extensionRoot}}\\${{parameters.taskName}}\test" -Force -Recurse
      Remove-Item -path "${{parameters.extensionRoot}}\\${{parameters.taskName}}\*.js.map" -Force -Recurse
    workingDirectory: '${{parameters.extensionRoot}}\\${{parameters.taskName}}'

